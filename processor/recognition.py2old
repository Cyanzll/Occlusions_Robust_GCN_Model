#!/usr/bin/env python
# pylint: disable=W0201
import sys
import argparse
import yaml
import numpy as np

# Keywords: 学生模型训练和测试

# Tensorboard
from torch.utils.tensorboard import SummaryWriter

# torch
import torch
import torch.nn as nn
import torch.optim as optim

# torchlight
import torchlight
from torchlight import str2bool
from torchlight import DictAction
from torchlight import import_class
from .processor import Processor

from .teacher_model import get_teacher_model

def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv1d') != -1:
        m.weight.data.normal_(0.0, 0.02)
        if m.bias is not None:
            m.bias.data.fill_(0)
    elif classname.find('Conv2d') != -1:
        m.weight.data.normal_(0.0, 0.02)
        if m.bias is not None:
            m.bias.data.fill_(0)
    elif classname.find('BatchNorm') != -1:
        m.weight.data.normal_(1.0, 0.02)
        m.bias.data.fill_(0)


class REC_Processor(Processor):
    """
        Processor for Skeleton-based Action Recgnition
    """

    #   加载模型 - 此处不涉及权重加载
    def load_model(self):
        self.model = self.io.load_model(self.arg.model, **(self.arg.model_args))

        # 加载教师模型
        self.teacher_model = get_teacher_model('M:\Code\st-gcn-master\st-gcn-master\processor\pre_trained\st_gcn.ntu-xsub.pt')
        print(">>> PreTrained Teacher Model is Loaded.")

        # 模型权重初始化
        self.model.apply(weights_init)

        # Loss 函数
        self.loss = nn.CrossEntropyLoss()
        self.dict_loss = DistillationLoss(self.teacher_model, 0.5, 1)

    def load_optimizer(self):
        if self.arg.optimizer == 'SGD':
            self.optimizer = optim.SGD(
                self.model.parameters(),
                lr=self.arg.base_lr,
                momentum=0.9,
                nesterov=self.arg.nesterov,
                weight_decay=self.arg.weight_decay)
        elif self.arg.optimizer == 'Adam':
            self.optimizer = optim.Adam(
                self.model.parameters(),
                lr=self.arg.base_lr,
                weight_decay=self.arg.weight_decay)
        else:
            raise ValueError()

    # 学习率调整
    def adjust_lr(self):
        if self.arg.optimizer == 'SGD' and self.arg.step:
            lr = self.arg.base_lr * (
                    0.1 ** np.sum(self.meta_info['epoch'] >= np.array(self.arg.step)))
            for param_group in self.optimizer.param_groups:
                param_group['lr'] = lr
            self.lr = lr
        else:
            self.lr = self.arg.base_lr

    # 准确率展示
    def show_topk(self, k):
        rank = self.result.argsort()
        hit_top_k = [l in rank[i, -k:] for i, l in enumerate(self.label)]
        accuracy = sum(hit_top_k) * 1.0 / len(hit_top_k)
        self.io.print_log('\tTop{}: {:.2f}%'.format(k, 100 * accuracy))

    # 训练
    def train(self):
        self.model.train()
        self.adjust_lr()
        # 超参数 - 混合比例
        alpha = 0.5
        loader = self.data_loader['train']
        # 导入完整的骨架数据集
        complete_skeleton_loader = list(enumerate(self.data_loader['complete_skeleton']))
        loss_value = []

        for step, (data, label) in enumerate(loader):

            # get complete data
            data_com = complete_skeleton_loader[step][1][0].float().to(self.dev)
            # label_com = complete_skeleton_loader[step][1][1].long().to(self.dev)
            # print(label_com)

            # get data
            data = data.float().to(self.dev)
            label = label.long().to(self.dev)
            # print(label)

            # forward
            output = self.model(data)
            stu_logits = output
            # loss = self.loss(output, label)  # Cross-Entro
            # 交叉熵损失函数值 - Hard Target
            ce_loss = self.loss(output, label)
            print(ce_loss)
            # KL散度 - Soft Target
            dict_loss = self.dict_loss(data_com, stu_logits)
            print(dict_loss)
            loss = alpha * ce_loss + (1 - alpha) * dict_loss

            self.writer.add_scalar("Loss/Train_Step", loss, self.step)

            # backward
            self.optimizer.zero_grad()
            loss.backward()
            self.optimizer.step()

            self.step = self.step + 1
            if self.step % 100 == 0:
                print("step: " + str(self.step))

            # statistics
            self.iter_info['loss'] = loss.data.item()
            self.iter_info['lr'] = '{:.6f}'.format(self.lr)
            loss_value.append(self.iter_info['loss'])
            self.show_iter_info()
            self.meta_info['iter'] += 1

        # 一个epoch跑完
        self.epoch_info['mean_loss'] = np.mean(loss_value)
        self.show_epoch_info()
        # 输出时间
        self.io.print_timer()

# 验证
    def test(self, evaluation=True):
        # 不启用 Batch Normalization 和 Dropout
        self.model.eval()

        loader = self.data_loader['test']
        loss_value = []
        result_frag = []
        label_frag = []

        for data, label in loader:

            # get data
            data = data.float().to(self.dev)
            label = label.long().to(self.dev)

            # inference
            # 不更新参数
            with torch.no_grad():
                output = self.model(data)
            result_frag.append(output.data.cpu().numpy())

            # get loss
            if evaluation:
                loss = self.loss(output, label)
                loss_value.append(loss.item())
                label_frag.append(label.data.cpu().numpy())

        self.result = np.concatenate(result_frag)
        if evaluation:
            self.label = np.concatenate(label_frag)
            self.epoch_info['mean_loss'] = np.mean(loss_value)
            self.show_epoch_info()

            # show top-k accuracy
            for k in self.arg.show_topk:
                self.show_topk(k)

    @staticmethod
    def get_parser(add_help=False):

        # parameter priority: command line > config > default
        parent_parser = Processor.get_parser(add_help=False)
        parser = argparse.ArgumentParser(
            add_help=add_help,
            parents=[parent_parser],
            description='Spatial Temporal Graph Convolution Network')

        # region arguments yapf: disable
        # evaluation
        parser.add_argument('--show_topk', type=int, default=[1, 5], nargs='+',
                            help='which Top K accuracy will be shown')
        # optim
        parser.add_argument('--base_lr', type=float, default=0.01, help='initial learning rate')
        parser.add_argument('--step', type=int, default=[], nargs='+',
                            help='the epoch where optimizer reduce the learning rate')
        parser.add_argument('--optimizer', default='SGD', help='type of optimizer')
        parser.add_argument('--nesterov', type=str2bool, default=True, help='use nesterov or not')
        parser.add_argument('--weight_decay', type=float, default=0.0001, help='weight decay for optimizer')
        # endregion yapf: enable

        return parser


import torch.nn.functional as F


# 蒸馏损失函数类
class DistillationLoss(torch.nn.Module):
    #                              教师模型
    def __init__(self, teacher_model: torch.nn.Module, alpha: float, tau: float):
        super().__init__()
        self.teacher_model = teacher_model
        self.alpha = alpha
        self.tau = tau

    def forward(self, inputs, stu_logits):
        # Don't backprop through the teacher
        with torch.no_grad():
            teacher_outputs = self.teacher_model(inputs)

        # 计算KL散度
        T = self.tau
        distillation_loss = F.kl_div(
            F.log_softmax(stu_logits / T, dim=1),
            F.softmax(teacher_outputs / T, dim=1),
            reduction='sum'
        ) * (T * T)

        # elif self.distillation_type == 'hard':
        #   distillation_loss = F.cross_entropy(stu_logits.argmax(dim=1), teacher_outputs.argmax(dim=1))
        # print(distillation_loss.shape)

        return distillation_loss